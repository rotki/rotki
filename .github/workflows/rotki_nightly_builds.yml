name: Rotki Nightly Builds

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - build

env:
  PYINSTALLER_VERSION: 3.5 # If editing this, make sure to also change rotki_packaging.yaml

jobs:

  build-linux:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
        python-version: [ 3.7 ]
        node-version: [ 14.x ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: pip cache persistence
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: npm cache persistence
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/cache/Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Setup SQLCipher
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils
          ./install_deps.sh
          sudo ldconfig
      - name: Package
        id: packaging
        run: |
          npm install -g npm@7
          ./package.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nightly-linux
          path: |
            ${{ steps.packaging.outputs.binary }}
            ${{ steps.packaging.outputs.binary_checksum }}
      - name: Notify On Failure
        if: ${{ failure() }}
        run: |
          curl --request POST \
            --url ${{ secrets.WEBHOOK }} \
            --header 'Content-Type: application/json' \
            --data '{
          	"content": ":construction_site: **Github Actions:** ${{ github.job }} failed :x: \r\n\r\n  <@&735068019440615516> please have a look at [${{ github.run_id }}](https://github.com/rotki/rotki/actions/runs/${{ github.run_id }}) :cry:"
          }'


  build-macos:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    environment: macos_sign
    strategy:
      matrix:
        os: [ macos-latest ]
        python-version: [ 3.7 ]
        node-version: [ 14.x ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        run: packaging/setup-osx.sh
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: pip cache persistence
        uses: actions/cache@v2
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: npm cache persistence
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/Library/Caches/Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Setup SQLCipher
        run: |
          cd "$(brew --repo homebrew/core)"
          git checkout 31f4d9cef46b1c39cdbe2f72ab682b5d0b02cf67 Formula/sqlcipher.rb #This formula installs 4.4.3 of sqlcipher
          brew install sqlcipher
      - name: Package
        id: packaging
        run: |
          pip3 install virtualenv
          python3 -m virtualenv ~/venv
          source ~/venv/bin/activate
          npm install -g npm@7
          ./package.sh
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          IDENTITY: ${{ secrets.IDENTITY }}
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nightly-osx
          path: |
            ${{ steps.packaging.outputs.binary }}
            ${{ steps.packaging.outputs.binary_checksum }}
      - name: Notify On Failure
        if: ${{ failure() }}
        run: |
          curl --request POST \
            --url ${{ secrets.WEBHOOK }} \
            --header 'Content-Type: application/json' \
            --data '{
          	"content": ":construction_site: **Github Actions:** ${{ github.job }} failed :x: \r\n\r\n  <@&735068019440615516> please have a look at [${{ github.run_id }}](https://github.com/rotki/rotki/actions/runs/${{ github.run_id }}) :cry:"
          }'

  build-windows:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SQLCIPHER_VERSION: 'v4.4.3'
      PYSQLCIPHER3_VERSION: 'c01b3bda144073eb34412ae64702fa2362a778e7'
      BUILD_DEPENDENCIES: "build-dependencies"
    strategy:
      matrix:
        os: [ windows-latest ]
        python-version: [ 3.7 ]
        node-version: [ 14.x ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: pip cache persistence
        uses: actions/cache@v2
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: npm cache persistence
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.npm-cache.outputs.dir }}
            ~\AppData\Local\Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Persist Build Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~\${{ env.BUILD_DEPENDENCIES }}\
            ~\AppData\Local\Temp\chocolatey\
          key: ${{ runner.os }}-build-dependencies-${{ env.SQLCIPHER_VERSION }}-${{ env.PYSQLCIPHER3_VERSION }}
      - name: Build rotki
        id: packaging
        run: |
          npm install -g npm@7
          .\package.ps1
        shell: powershell
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nightly-windows
          path: |
            ${{ steps.packaging.outputs.binary }}
            ${{ steps.packaging.outputs.binary_checksum }}
      - name: Notify On Failure
        if: ${{ failure() }}
        run: |
          $uri="${{ secrets.WEBHOOK }}"
          $body = @{
            "content" = ":construction_site: **Github Actions:** ${{ github.job }} failed :x: <@&735068019440615516> please have a look at [${{ github.run_id }}](https://github.com/rotki/rotki/actions/runs/${{ github.run_id }}) :cry:"
          } | ConvertTo-Json
          Invoke-RestMethod -Method Post -Uri $uri -ContentType "application/json" -Body $body

  build-docker:
    runs-on: ubuntu-18.04
    environment: docker
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Rotki Version
        id: rotki_version
        run: |
          ROTKI_VERSION=$(cat .bumpversion.cfg | grep 'current_version = ' | sed -n -e 's/current_version = //p')
          POSTFIX=$(if git describe --tags --exact-match "$REVISION" &>/dev/null; then echo ''; else echo '-dev'; fi)
          ROTKI_VERSION=${ROTKI_VERSION}${POSTFIX}-$(date +'%Y.%m.%d')
          echo "::set-output name=version::${ROTKI_VERSION}"
      - name: Docker Tag
        id: docker_tag
        run: |
          if [[ "$GITHUB_EVENT_NAME" == 'schedule' ]]; then
            TAG=nightly
          else
            TAG=dev
          fi
          echo "::set-output name=tag::$TAG"
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: rotki/rotki:${{ steps.docker_tag.outputs.tag }}
          build-args: |
            REVISION=${{ github.sha }}
            ROTKI_VERSION=${{ steps.rotki_version.outputs.version }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Notify On Failure
        if: ${{ failure() }}
        run: |
          curl --request POST \
            --url ${{ secrets.WEBHOOK }} \
            --header 'Content-Type: application/json' \
            --data '{
          	"content": ":construction_site: **Github Actions:** ${{ github.job }} failed :x: \r\n\r\n  <@&735068019440615516> please have a look at [${{ github.run_id }}](https://github.com/rotki/rotki/actions/runs/${{ github.run_id }}) :cry:"
          }'
