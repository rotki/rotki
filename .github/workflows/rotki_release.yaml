name: Rotki Release
on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_MACOS: 11

permissions: {}

jobs:
  create_draft:
    name: Create Draft
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Get Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> "$GITHUB_ENV"
      - name: Generate changelog
        id: change_log
        run: |
          version=$(echo "$RELEASE_VERSION" | sed 's/^v//g')
          echo 'changes<<EOF' >> "$GITHUB_OUTPUT"
          python3 tools/scripts/generate_changelog.py -f docs/changelog.rst -v "$version" >> "$GITHUB_OUTPUT"
          echo 'EOF' >> "$GITHUB_OUTPUT"
          echo "version=${version}" >> "$GITHUB_OUTPUT"
      - name: Create Release
        id: create_release
        uses: rotki/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Rotki ${{ env.RELEASE_VERSION }} -
          body: |
            # Description

            For more information check the detailed changelog below :point_down:

            # Downloads

            Upgrade is highly recommended. Download the binary for your OS from below:

            - **Linux**
              - [AppImage](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_x86_64-${{ env.RELEASE_VERSION }}.AppImage)
              - [Tar with executable](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_x64-${{ env.RELEASE_VERSION }}.tar.xz)
              - [deb package](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_amd64-${{ env.RELEASE_VERSION }}.deb)
              - [Standalone Backend](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-core-${{ steps.change_log.outputs.version }}-linux)
            - **OSX**
              - arm64
                - [DMG](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin_arm64-${{ env.RELEASE_VERSION }}.dmg)
                - [ZIP](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin_arm64-${{ env.RELEASE_VERSION }}.zip)
              - x86_64
                - [DMG](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin_x64-${{ env.RELEASE_VERSION }}.dmg)
                - [ZIP](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin_x64-${{ env.RELEASE_VERSION }}.zip)
              - [Standalone Backend](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-core-${{ steps.change_log.outputs.version }}-macos.zip)
            - **Windows**
              - [Windows executable](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-win32_x64-${{ env.RELEASE_VERSION }}.exe)
              - [Standalone Backend](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-core-${{ steps.change_log.outputs.version }}-windows.exe)
            
            Optionally, you can also [verify the integrity](https://docs.rotki.com/requirement-and-installation/packaged-binaries.html#verifying-integrity) of the aforementioned binaries using the following checksums:
            
            - **Linux**
              - [AppImage checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_x86_64-${{ env.RELEASE_VERSION }}.AppImage.sha512)
              - [Tar with executable checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_x64-${{ env.RELEASE_VERSION }}.tar.xz.sha512)
              - [deb package](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_amd64-${{ env.RELEASE_VERSION }}.deb.sha512)
              - [Standalone Backend](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-core-${{ steps.change_log.outputs.version }}-linux.sha512)
            - **OSX**
              - arm64
                - [DMG checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin_arm64-${{ env.RELEASE_VERSION }}.dmg.sha512)
                - [ZIP checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin_arm64-${{ env.RELEASE_VERSION }}.zip.sha512)
              - x86_64
                - [DMG checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin_x64-${{ env.RELEASE_VERSION }}.dmg.sha512)
                - [ZIP checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin_x64-${{ env.RELEASE_VERSION }}.zip.sha512)
              - [Standalone Backend](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-core-backend-${{ steps.change_log.outputs.version }}-macos.zip.sha512)
            - **Windows**
              - [Windows executable checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-win32_x64-${{ env.RELEASE_VERSION }}.exe.sha512)
              - [Standalone Backend](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-core-${{ steps.change_log.outputs.version }}-windows.exe.sha512)

            # Release Highlights
            ----

            These were the highlights. Check below for the full changelog :point_down:

            ${{ steps.change_log.outputs.changes }}

            # Newly supported assets

            Added support for the following assets:

          draft: true
  linux:
    name: 'Build linux binary'
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-20.04
    needs: create_draft
    permissions:
      id-token: write
      attestations: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Load env
        uses: rotki/action-env@v2
        with:
          env_file: .github/.env.ci
      - name: Get Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> "$GITHUB_ENV"
      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'frontend/.nvmrc'
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          package_json_file: frontend/package.json
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            frontend/app/components.d.ts
            ~/.cache/Cypress
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Package
        id: packaging
        run: |
          echo "::group::packaging dependencies"
          pip3 install --upgrade uv=="${UV_VERSION}"
          uv pip install --system -r requirements_packaging.txt
          echo "::endgroup::"
          ./package.py --build full
      - name: Upload to release
        uses: rotki/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Rotki ${{ env.RELEASE_VERSION }} -
          draft: true
          files: |
            dist/*.sha512
            dist/rotki-core-*-linux
      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/rotki-core-*-linux
            dist/*.deb
            dist/*.AppImage
            dist/*.tar.xz
            

  macos:
    name: 'Build macOS binary ${{ matrix.os.arch }}'
    strategy:
      fail-fast: false
      matrix:
        os:
          - runner: macos-14
            arch: 'arm64'
            target: 11
            platform: macosx-11.0-arm64
          - runner: macos-13
            arch: 'x86_64'
            target: 10.9
            platform: macosx-10.9-x86_64
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ARCHFLAGS: -arch ${{ matrix.os.arch }}
      _PYTHON_HOST_PLATFORM: ${{ matrix.os.platform }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os.target }}
      CMAKE_OSX_ARCHITECTURES: ${{ matrix.os.arch }}
      NODE_OPTIONS: --max-old-space-size=4096
    environment: macos_sign
    runs-on: ${{ matrix.os.runner }}
    needs: create_draft
    permissions:
      id-token: write
      attestations: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Load env
        uses: rotki/action-env@v2
        with:
          env_file: .github/.env.ci
      - name: Add rust target for building deps
        if: ${{ matrix.os.arch == 'arm64' }}
        run: rustup target add aarch64-apple-darwin
      - name: Cache python pkg
        uses: actions/cache@v4
        with:
          path: ~/python*.pkg
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ env.PYTHON_MACOS }}-${{ matrix.os.arch }}
      - name: Cache python dependencies
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-${{ matrix.os.arch }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os.arch }}-pip-
      - name: Set up python
        run: packaging/setup-macos-python.sh "${PYTHON_VERSION}" "${PYTHON_MACOS}"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'frontend/.nvmrc'
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          package_json_file: frontend/package.json
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            frontend/app/components.d.ts
            ~/Library/Caches/Cypress
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Package
        id: packaging
        run: |
          echo "::group::packaging dependencies"
          pip3 install --upgrade uv=="${UV_VERSION}"
          pip3 install virtualenv
          python3 -m virtualenv ~/venv
          source ~/venv/bin/activate
          uv pip install -r requirements_packaging.txt
          echo "::endgroup::"
          ./package.py --build full
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          IDENTITY: ${{ secrets.IDENTITY }}
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
      - name: Append architecture to latest-mac.yml
        run: mv dist/latest-mac.yml dist/latest-mac-${{ matrix.os.arch }}.yml
      - name: upload latest-mac.yml
        uses: actions/upload-artifact@v4
        with:
          name: latest-mac-${{ matrix.os.arch }}
          path: dist/latest-mac-*.yml
      - name: Upload to release
        uses: rotki/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Rotki ${{ env.RELEASE_VERSION }} -
          draft: true
          files: |
            dist/*.sha512
            dist/rotki-core-*-macos-*.zip
      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/*.zip
            dist/*.dmg

  macos_updater:
    name: Merge latest-mac.yml
    needs: macos
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'frontend/.nvmrc'
      - name: download latest-mac.yml artifacts
        uses: actions/download-artifact@v4
        with:
          path: latest-mac
          pattern: latest-mac-*
          merge-multiple: true
      - name: Merge latest-mac.yml
        run: |
          npm i js-yaml consola --prefix ./.github/scripts         
          node ./.github/scripts/merge-latest.mjs latest-mac/latest-mac-x86_64.yml latest-mac/latest-mac-arm64.yml latest-mac.yml
      - name: Upload to release
        uses: rotki/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Rotki ${{ env.RELEASE_VERSION }} -
          draft: true
          files: latest-mac.yml

  windows:
    name: 'Build windows binary'
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_DEPENDENCIES: "build-dependencies"
    runs-on: windows-latest
    environment: windows_sign
    needs: create_draft
    permissions:
      id-token: write
      attestations: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Load env
        uses: rotki/action-env@v2
        with:
          env_file: .github/.env.ci
      - name: Get Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> "$GITHUB_ENV"
      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'frontend/.nvmrc'
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          package_json_file: frontend/package.json
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            frontend/app/components.d.ts
            ~\AppData\Local\Cypress
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Persist Build Dependencies
        uses: actions/cache@v4
        with:
          path: ~\${{ env.BUILD_DEPENDENCIES }}\
          key: ${{ runner.os }}-build-dependencies
      - name: Build rotki
        id: packaging
        env:
          CERTIFICATE_WIN_APPLICATION: ${{ secrets.CERTIFICATE_WIN_APPLICATION }}
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          echo ::group::"packaging dependencies"
          pip3 install --upgrade uv=="${env:UV_VERSION}"
          uv pip install --system -r requirements_packaging.txt
          echo ::endgroup::
          python .\package.py --build full
        shell: powershell
      - name: Upload to release
        uses: rotki/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Rotki ${{ env.RELEASE_VERSION }} -
          draft: true
          files: |
            dist/*.sha512
            dist/rotki-core-*-windows.exe
      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: dist/*.exe

  docker:
    name: 'Build docker images'
    runs-on: ${{ matrix.platform.runner }}
    environment: docker
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux/amd64
            runner: ubuntu-24.04
          - name: linux/arm64
            runner: ubuntu-24.04-arm
    permissions:
      id-token: write
      attestations: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Prepare
        id: prepare
        run: |
          platform=${{ matrix.platform.name }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Rotki Version
        id: rotki_version
        run: echo "version=${GITHUB_REF#refs/*/}" >> "$GITHUB_OUTPUT"

      - name: Build and push by digest
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform.name }}
          provenance: mode=max
          tags: |
            ${{ github.repository }}:${{ steps.rotki_version.outputs.version }}
          build-args: |
            REVISION=${{ github.sha }}
            ROTKI_VERSION=${{ steps.rotki_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ github.repository }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  docker-merge:
    runs-on: ubuntu-latest
    needs:
      - docker
    environment: docker
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ github.repository }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect "${{ github.repository }}:${{ steps.meta.outputs.version }}"