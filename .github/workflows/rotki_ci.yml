name: Rotki CI

on:
  pull_request:
    branches:
      - master
      - develop
      - bugfixes

env:
  PYTHON_VERSION: 3.9.13
  NODE_VERSION: 16
  PIP_VERSION: 22.1.2

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  check-changes:
    name: 'Required job check'
    runs-on: ubuntu-latest
    outputs:
      backend_tasks: ${{ steps.checker.outputs.backend_tasks }}
      frontend_tasks: ${{ steps.checker.outputs.frontend_tasks }}
      documentation_tasks: ${{ steps.checker.outputs.documentation_tasks }}
      test_environment: ${{env.TEST_ENVIRONMENT}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run check action
        uses: rotki/action-job-checker@v1
        id: checker
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          documentation_paths: |
            docs
          backend_paths: |
            rotkehlchen
            requirements.txt
            requirements_dev.txt
            requirements_lint.txt
          frontend_paths: |
            frontend/app

  lint-frontend:
    name: 'Frontend lint'
    needs: ['check-changes']
    if: ${{ needs.check-changes.outputs.frontend_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Cache cypress
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-node--ci-${{ hashFiles('frontend/package-lock.json') }}
      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm install -g npm@8
          if ! npm ci --exit-code; then
            npm ci
          fi
      - name: Build
        working-directory: ./frontend
        run: npm run build
      - name: Lint code
        working-directory: ./frontend
        run: npm run lint
      - name: Lint style
        working-directory: ./frontend/app
        run: npm run lint:style

  unittest-frontend:
    name: 'Frontend unit tests'
    needs: [ 'check-changes' ]
    if: ${{ needs.check-changes.outputs.frontend_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Cache cypress
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-node--ci-${{ hashFiles('frontend/package-lock.json') }}
      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm install -g npm@8
          if ! npm ci --exit-code; then
            npm ci
          fi
          npm run build -w @rotki/common
      - name: Run unit tests
        working-directory: ./frontend/app
        run: npm run test:unit
      - name: Upload coverage
        working-directory: ./frontend/app
        run: cd ../.. && ./.github/.codecov -F frontend_unit

  docs:
    name: 'Documentation build'
    needs: [ 'check-changes' ]
    if: ${{ needs.check-changes.outputs.documentation_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install --upgrade pip==${{ env.PIP_VERSION }}
          pip install -r requirements_docs.txt
          pip install -e .
          git rev-parse HEAD
      - name: Build html docs
        run: cd docs && make html

  lint-backend:
    name: 'Backend lint'
    needs: ['check-changes']
    if: ${{ needs.check-changes.outputs.backend_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install --upgrade pip==${{ env.PIP_VERSION }}
          pip install -r requirements_lint.txt
          pip install -e .
          git rev-parse HEAD
      - name: Lint
        run: make lint

  test-backend:
    name: 'Backend tests'
    if: ${{ needs.check-changes.outputs.backend_tasks }}
    needs: ['lint-backend', 'check-changes']
    timeout-minutes: 60
    env:
      CI: true
      TEST_ENVIRONMENT: ${{needs.check-changes.outputs.test_environment}}
    environment: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Store test directory
        uses: actions/cache@v3
        with:
          path: ~/.cache/.rotkehlchen-test-dir
          key: ${{ runner.os }}-testdir-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-testdir-
      - name: Install dependencies
        run: |
          pip install --upgrade pip==${{ env.PIP_VERSION }} wheel
          pip install codecov pytest-cov
          pip install -r requirements_dev.txt
          pip install -e .
      - name: Run tests
        run: |
          COVERAGE_ARGS='--cov=./'
          PYTEST_ARGS='--durations=150'
          echo "Test environment set to ${TEST_ENVIRONMENT}"
          python pytestgeventwrapper.py $PYTEST_ARGS $COVERAGE_ARGS rotkehlchen/tests && python pytestgeventwrapper.py --dead-fixtures
      - name: Upload coverage
        run: ./.github/.codecov -F backend

  test-e2e:
    name: 'Frontend e2e tests'
    needs: [ 'check-changes' ]
    if: |
      contains(needs.check-changes.outputs.frontend_tasks, true) ||
      contains(needs.check-changes.outputs.backend_tasks, true)
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Store frontend cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/Cypress
            frontend/app/components.d.ts
          key: ${{ runner.os }}-e2e-js-${{ hashFiles('frontend/package-lock.json') }}
      - name: Store test data
        uses: actions/cache@v3
        with:
          path: |
            ~/rotki-e2e/icons
            ~/rotki-e2e/global_data
          key: ${{ runner.os }}-e2e-data-${{ hashFiles('rotkehlchen/data/global.db') }}
      - name: Setup backend
        run: |
          pip install --upgrade pip==${{ env.PIP_VERSION }}
          pip install -r requirements.txt
          pip install -e .
      - name: Restore dependencies
        working-directory: ./frontend
        run: |
          npm install -g npm@8
          if ! npm ci --exit-code; then
            npm ci
          fi
          npm run build -w @rotki/common
      - name: Run e2e tests
        uses: cypress-io/github-action@v2
        env:
          ARGS: "--browser chrome"
          CYPRESS_ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        with:
          install: false
          command: npm run test:integration-ci
          working-directory: ./frontend/app
      - name: Upload coverage
        working-directory: ./frontend/app
        run: cd ../.. && ./.github/.codecov -F frontend_integration
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: screenshots-${{ runner.os }}
          path: ./frontend/app/tests/e2e/screenshots
      - name: Upload backend logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-logs-${{ runner.os }}
          path: ~/rotki-e2e-logs/*.log
      - name: Upload cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: videos-${{ runner.os }}
          path: ./frontend/app/tests/e2e/videos
  done:
    name: 'Success check'
    if: ${{ always() }}
    needs: [ 'check-changes', 'lint-frontend', 'unittest-frontend', 'docs', 'lint-backend', 'test-backend', 'test-e2e' ]
    runs-on: ubuntu-latest
    steps:
      - name: Check if any task failed
        run: |
          data=($(echo "${{ toJSON(needs.*.result) }}" | sed 's/[][,]//g'))
          for i in "${data[@]}"
          do
            if [[ $i == "failure" ]]; then
                echo "::error::At least one required task failed"
                exit 1;
            fi
          done
