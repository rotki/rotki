name: Rotki CI

on:
  pull_request:
    branches:
      - master
      - develop
      - bugfixes

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  load_env:
    uses: ./.github/workflows/task_env.yml
  check-changes:
    name: 'Required job check'
    runs-on: ubuntu-latest
    outputs:
      backend_tasks: ${{ steps.checker.outputs.backend_tasks }}
      frontend_tasks: ${{ steps.checker.outputs.frontend_tasks }}
      documentation_tasks: ${{ steps.checker.outputs.documentation_tasks }}
      test_environment: ${{env.TEST_ENVIRONMENT}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run check action
        uses: rotki/action-job-checker@v1
        id: checker
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          documentation_paths: |
            docs
          backend_paths: |
            rotkehlchen
            requirements.txt
            requirements_dev.txt
            requirements_lint.txt
          frontend_paths: |
            frontend/app

  code-analyze-frontend:
    name: 'Code analyze frontend'
    needs: ['check-changes', 'load_env']
    permissions:
      actions: read
      contents: read
      security-events: write
    if: ${{ needs.check-changes.outputs.frontend_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node  # not sure this step is needed
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.load_env.outputs.node_version }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript'
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

  lint-frontend:
    name: 'Frontend lint'
    needs: ['check-changes', 'load_env']
    if: ${{ needs.check-changes.outputs.frontend_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.load_env.outputs.node_version }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Cache cypress
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-node--ci-${{ hashFiles('frontend/package-lock.json') }}
      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm install -g npm@8
          if ! npm ci --exit-code; then
            npm ci
          fi
      - name: Build
        working-directory: ./frontend
        run: npm run build
      - name: Lint code
        working-directory: ./frontend
        run: npm run lint
      - name: Lint style
        working-directory: ./frontend/app
        run: npm run lint:style

  unittest-frontend:
    name: 'Frontend unit tests'
    needs: [ 'check-changes', 'load_env' ]
    if: ${{ needs.check-changes.outputs.frontend_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.load_env.outputs.node_version }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Cache cypress
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-node--ci-${{ hashFiles('frontend/package-lock.json') }}
      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm install -g npm@8
          if ! npm ci --exit-code; then
            npm ci
          fi
          npm run build -w @rotki/common
      - name: Run unit tests
        working-directory: ./frontend/app
        run: npm run test:unit
      - name: Upload coverage
        working-directory: ./frontend/app
        run: cd ../.. && ./.github/.codecov -F frontend_unit

  docs:
    name: 'Documentation build'
    needs: [ 'check-changes', 'load_env' ]
    if: ${{ needs.check-changes.outputs.documentation_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.load_env.outputs.python_version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install --upgrade pip==${{ needs.load_env.outputs.pip_version }}
          pip install -r requirements_docs.txt
          pip install -e .
          git rev-parse HEAD
      - name: Build html docs
        run: cd docs && make html

  code-analyze-backend:
    name: 'Code analyze backend'
    needs: ['check-changes', 'load_env']
    permissions:
      actions: read
      contents: read
      security-events: write
    if: ${{ needs.check-changes.outputs.backend_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup python  # not sure if this step is needed
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.load_env.outputs.python_version }}
          cache: 'pip'
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'python'
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

  lint-backend:
    name: 'Backend lint'
    needs: ['check-changes', 'load_env']
    if: ${{ needs.check-changes.outputs.backend_tasks }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.load_env.outputs.python_version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install --upgrade pip==${{ needs.load_env.outputs.pip_version }}
          pip install -r requirements_lint.txt
          pip install -e .
          git rev-parse HEAD
      - name: Lint
        run: make lint

  test-backend:
    if: ${{ needs.check-changes.outputs.backend_tasks }}
    needs: ['lint-backend', 'check-changes']
    uses: ./.github/workflows/task_backend_tests.yml
    with:
      os: ubuntu-latest
      test_environment: ${{needs.check-changes.outputs.test_environment}}

  test-e2e:
    name: 'Frontend e2e tests'
    needs: check-changes
    if: |
      contains(needs.check-changes.outputs.frontend_tasks, true) ||
      contains(needs.check-changes.outputs.backend_tasks, true)
    uses:  ./.github/workflows/task_e2e_tests.yml

  done:
    name: 'Success check'
    if: ${{ always() }}
    needs: [ 'check-changes', 'lint-frontend', 'unittest-frontend', 'docs', 'lint-backend', 'test-backend', 'test-e2e' ]
    runs-on: ubuntu-latest
    steps:
      - name: Check if any task failed
        run: |
          data=($(echo "${{ toJSON(needs.*.result) }}" | sed 's/[][,]//g'))
          for i in "${data[@]}"
          do
            if [[ $i == "failure" ]]; then
                echo "::error::At least one required task failed"
                exit 1;
            fi
          done
