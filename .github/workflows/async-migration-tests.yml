name: AsyncIO Migration Tests

on:
  push:
    branches: [feat/remove-gevent]
  pull_request:
    paths:
      - 'rotkehlchen/api/async_*.py'
      - 'rotkehlchen/api/v1/async_*.py'
      - 'rotkehlchen/api/v1/*_fastapi.py'
      - 'rotkehlchen/db/drivers/async*.py'
      - 'rotkehlchen/db/async_*.py'
      - 'rotkehlchen/tasks/async_*.py'
      - 'rotkehlchen/api/websockets/async_*.py'
      - 'rotkehlchen/tests/test_async_*.py'
      - 'rotkehlchen/tests/test_*_migration.py'

jobs:
  async-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
        async-mode: ['disabled', 'pilot', 'mixed', 'full']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements_dev.txt
        # Install async dependencies
        pip install fastapi uvicorn httpx websockets
    
    - name: Run async migration tests
      env:
        ASYNC_MODE: ${{ matrix.async-mode }}
      run: |
        # Run specific async tests
        python pytestgeventwrapper.py \
          rotkehlchen/tests/test_endpoint_migration.py \
          rotkehlchen/tests/test_async_websockets.py \
          rotkehlchen/tests/test_async_task_manager.py \
          -v --tb=short
    
    - name: Run performance regression tests
      if: matrix.async-mode == 'full'
      run: |
        # Start both servers
        python -m rotkehlchen --rest-api-port 5042 &
        FLASK_PID=$!
        
        ASYNC_MODE=full python scripts/start_async_server.py --port 5043 &
        FASTAPI_PID=$!
        
        # Wait for servers to start
        sleep 10
        
        # Run benchmark
        python scripts/benchmark_migration.py --quick
        
        # Cleanup
        kill $FLASK_PID $FASTAPI_PID
    
    - name: Upload benchmark results
      if: matrix.async-mode == 'full'
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ matrix.python-version }}
        path: benchmark_results.json

  compatibility-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements_dev.txt
        pip install fastapi uvicorn httpx websockets
    
    - name: Test Flask/FastAPI compatibility
      run: |
        # Test that migrated endpoints return identical responses
        python pytestgeventwrapper.py \
          rotkehlchen/tests/test_endpoint_migration.py::TestEndpointMigrationCompatibility \
          -v --tb=short
    
    - name: Test feature flag system
      run: |
        python pytestgeventwrapper.py \
          rotkehlchen/tests/test_endpoint_migration.py::TestFeatureFlagSystem \
          -v --tb=short

  database-migration-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements_dev.txt
    
    - name: Test async database operations
      run: |
        # Create test script
        cat > test_async_db.py << 'EOF'
        import asyncio
        import tempfile
        from pathlib import Path
        from rotkehlchen.db.async_handler import AsyncDBHandler
        from rotkehlchen.user_messages import MessagesAggregator
        
        async def test_async_db():
            with tempfile.TemporaryDirectory() as tmpdir:
                db_path = Path(tmpdir)
                msg_aggregator = MessagesAggregator()
                
                # Create async handler
                async_db = AsyncDBHandler(
                    db_path=db_path,
                    password="test123",
                    msg_aggregator=msg_aggregator,
                )
                
                await async_db.initialize()
                
                # Test operations
                settings = await async_db.get_settings()
                print(f"Settings: {settings}")
                
                # Test concurrent reads
                tasks = [
                    async_db.get_settings() for _ in range(10)
                ]
                results = await asyncio.gather(*tasks)
                print(f"Concurrent reads successful: {len(results)}")
                
                await async_db.close()
                print("Async database tests passed!")
        
        asyncio.run(test_async_db())
        EOF
        
        python test_async_db.py