name: Rotki Nightly Tests

on:
  schedule:
    - cron: "0 0 * * *"

jobs:
  test-backend:
    env:
      CI: true
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, macos-10.15 ]
        python-version: [ 3.9 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup SQLCipher
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-18.04' ];
          then
            sudo apt-get update
            sudo apt-get install libxml2-utils
            ./install_deps.sh
            sudo ldconfig
          fi
          if [ ${{ matrix.os }} == 'macos-10.15' ];
          then
            brew install sqlcipher
          fi
      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Store python Cache (linux)
        uses: actions/cache@v3
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Store python Cache (macOS)
        uses: actions/cache@v3
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Store test dir
        uses: actions/cache@v3
        with:
          path: ~/.cache/.rotkehlchen-test-dir
          key: ${{ runner.os }}-testdir
      - name: Install dependencies
        run: |
          pip install --upgrade pip==21.3.1 wheel
          pip install codecov pytest-cov
          pip install -r requirements_dev.txt
          pip install -e .
      - name: Run Test
        run: |
          COVERAGE_ARGS='--cov=./'
          if [ ${{ matrix.os }} == 'macos-10.15' ];
          then
            COVERAGE_ARGS=''
          fi
          python pytestgeventwrapper.py $COVERAGE_ARGS rotkehlchen/tests
      - name: Upload coverage
        run: bash ./.github/.codecov -F backend

  test-integration:
    needs: [ test-backend ]
    env:
      CI: true
      FILTER: '[ui tests]'
    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
        python-version: [ 3.9 ]
        node-version: [ 16.x ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: Store python cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/.rotkehlchen-test-dir
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Store npm cache
        uses: actions/cache@v3
        if: contains(steps.check.outputs.ui-tests, true)
        with:
          path: |
            ~/.npm
            ~/.cache/Cypress
            ./frontend/app/components.d.ts
          key: ${{ runner.os }}-node-${{ hashFiles('**/requirements.txt') }}
      - name: Store frontend cache
        uses: actions/cache@v3
        with:
          path: |
            ~/rotki-e2e/price_history
            ~/rotki-e2e/icons
            ~/rotki-e2e/global_data
          key: ${{ runner.os }}-e2e-cache-${{ hashFiles('**/app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-e2e-cache-
      - name: Setup SQLCipher
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils
          ./install_deps.sh
          sudo ldconfig
      - name: Setup backend
        run: |
          pip install --upgrade pip==21.3.1 wheel
          pip install -r requirements.txt
          pip install -e .
      - name: Restore dependencies
        working-directory: ./frontend
        run: |
          npm install -g npm@8        
          npm ci          
          npm run build -w @rotki/common
      - name: Run integration tests
        uses: cypress-io/github-action@v2
        env:
          ARGS: "--browser chrome"
        with:
          install: false
          command: npm run test:integration-ci
          working-directory: ./frontend/app
      - name: Upload coverage
        working-directory: ./frontend/app
        run: cd ../.. && ./.github/.codecov -F frontend_integration
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: screenshots-${{ runner.os }}
          path: ./frontend/app/tests/e2e/screenshots
      - name: Upload backend logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-logs-${{ runner.os }}
          path: ~/rotki-e2e-logs/*.log
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: videos-${{ runner.os }}
          path: ./frontend/app/tests/e2e/videos