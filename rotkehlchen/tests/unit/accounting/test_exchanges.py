from collections import defaultdict
from unittest.mock import patch

import pytest

from rotkehlchen.accounting.ledger_actions import LedgerAction, LedgerActionType
from rotkehlchen.accounting.mixins.event import AccountingEventType
from rotkehlchen.constants.assets import A_BTC, A_ETH, A_LINK, A_USDT
from rotkehlchen.constants.misc import ONE, ZERO
from rotkehlchen.db.ledger_actions import DBLedgerActions
from rotkehlchen.exchanges.data_structures import AssetMovement, MarginPosition, Trade
from rotkehlchen.fval import FVal
from rotkehlchen.tests.utils.accounting import accounting_create_and_process_history
from rotkehlchen.tests.utils.exchanges import mock_normal_coinbase_query
from rotkehlchen.tests.utils.history import prices
from rotkehlchen.types import AssetMovementCategory, Location, Timestamp, TradeType


@pytest.mark.parametrize('have_decoders', [True])
@pytest.mark.parametrize(
    'added_exchanges',
    [(Location.COINBASE,)],
)
@pytest.mark.parametrize('ethereum_accounts', [[]])
@pytest.mark.parametrize('mocked_price_queries', [prices])
def test_account_for_coinbase_ledger_actions(rotkehlchen_api_server_with_exchanges):
    """
    Test that ledger actions generated by coinbase are taken into account in accounting
    """
    rotki = rotkehlchen_api_server_with_exchanges.rest_api.rotkehlchen
    coinbase = rotki.exchange_manager.get_exchange('coinbase', Location.COINBASE)

    with patch.object(coinbase.session, 'get', side_effect=mock_normal_coinbase_query):
        report, events = accounting_create_and_process_history(rotki=rotki, start_ts=0, end_ts=1611426233)  # noqa: E501

    expected_total_actions = 10
    assert report['total_actions'] == expected_total_actions
    events_map = defaultdict(int)
    for event in events:
        events_map[event.type] += 1

    events_map.pop(AccountingEventType.PREFORK_ACQUISITION)
    assert events_map[AccountingEventType.LEDGER_ACTION] == 2
    assert events_map[AccountingEventType.TRADE] == 4
    assert events_map[AccountingEventType.FEE] == 2
    assert events_map[AccountingEventType.ASSET_MOVEMENT] == 3
    assert sum(events_map.values()) == 11  # processed events


@pytest.mark.parametrize('have_decoders', [True])
@pytest.mark.parametrize('default_mock_price_value', [FVal(1.5)])
@pytest.mark.parametrize('ethereum_accounts', [[]])
@pytest.mark.parametrize('added_exchanges', [(Location.COINBASE,)])
def test_exchanges_removed_api_keys(rotkehlchen_api_server_with_exchanges):
    """
    Test that if actions made on an exchange are stored in the DB but the API keys were removed
    then the actions are still taken into account in accounting.
    """
    rotki = rotkehlchen_api_server_with_exchanges.rest_api.rotkehlchen
    with rotki.data.db.user_write() as write_cursor:
        rotki.data.db.add_trades(write_cursor, trades=[Trade(
            timestamp=Timestamp(1611426201),
            amount=ONE,
            base_asset=A_ETH,
            quote_asset=A_BTC,
            trade_type=TradeType.BUY,
            rate=FVal(1.5),
            location=Location.COINBASE,
        ), Trade(
            timestamp=Timestamp(1611426201),
            amount=FVal(7),
            base_asset=A_USDT,
            quote_asset=A_LINK,
            trade_type=TradeType.SELL,
            rate=FVal(7),
            location=Location.EXTERNAL,
        )])
        rotki.data.db.add_asset_movements(write_cursor, asset_movements=[AssetMovement(
            timestamp=Timestamp(1611426201),
            location=Location.COINBASE,
            category=AssetMovementCategory.DEPOSIT,
            asset=A_BTC,
            amount=ONE,
            fee_asset=A_BTC,
            fee=FVal(0.00001),
            address=None,
            transaction_id=None,
            link='no link',
        )])
        rotki.data.db.add_margin_positions(write_cursor, margin_positions=[MarginPosition(
            location=Location.COINBASE,
            open_time=Timestamp(1611426200),
            close_time=Timestamp(1611426201),
            profit_loss=ONE,
            pl_currency=A_BTC,
            fee=ZERO,
            fee_currency=A_BTC,
            link='no link',
            notes='no notes',
        )])
        DBLedgerActions(rotki.data.db, rotki.data.db.msg_aggregator).add_ledger_actions(
            write_cursor,
            actions=[LedgerAction(
                identifier=0,
                timestamp=Timestamp(1611426201),
                action_type=LedgerActionType.INCOME,
                location=Location.COINBASE,
                amount=ONE,
                asset=A_BTC,
                rate=None,
                rate_asset=None,
                link='no link',
                notes='no notes',
            )],
        )

    rotki.exchange_manager.delete_exchange(name='coinbase', location=Location.COINBASE)
    _, events = accounting_create_and_process_history(rotki=rotki, start_ts=0, end_ts=1611426233)
    assert len(events) == 7
    event1 = events[0]
    assert event1.type == AccountingEventType.TRADE
    assert event1.location == Location.COINBASE
    assert event1.taxable_amount == FVal(1.5)
    assert event1.asset == A_BTC

    event2 = events[1]
    assert event2.type == AccountingEventType.TRADE
    assert event2.location == Location.COINBASE
    assert event2.free_amount == ONE
    assert event2.asset == A_ETH

    event3 = events[2]
    assert event3.type == AccountingEventType.TRADE
    assert event3.location == Location.EXTERNAL
    assert event3.taxable_amount == FVal(7)
    assert event3.asset == A_USDT

    event4 = events[3]
    assert event4.type == AccountingEventType.TRADE
    assert event4.location == Location.EXTERNAL
    assert event4.free_amount == FVal(49)
    assert event4.asset == A_LINK

    event5 = events[4]
    assert event5.type == AccountingEventType.ASSET_MOVEMENT
    assert event5.location == Location.COINBASE
    assert event5.free_amount == ZERO
    assert event5.taxable_amount == FVal(0.00001)
    assert event5.asset == A_BTC

    event6 = events[5]
    assert event6.type == AccountingEventType.MARGIN_POSITION
    assert event6.location == Location.COINBASE
    assert event6.free_amount == ZERO
    assert event6.taxable_amount == ONE
    assert event6.asset == A_BTC

    event7 = events[6]
    assert event7.type == AccountingEventType.LEDGER_ACTION
    assert event7.location == Location.COINBASE
    assert event7.free_amount == ZERO
    assert event7.taxable_amount == ONE
    assert event7.asset == A_BTC
