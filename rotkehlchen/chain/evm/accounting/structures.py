from collections.abc import Iterator
from enum import Enum
from typing import TYPE_CHECKING, Literal, NamedTuple, Optional, Protocol

from rotkehlchen.accounting.structures.base import HistoryBaseEntry

if TYPE_CHECKING:
    from rotkehlchen.accounting.pot import AccountingPot


class AccountantCallback(Protocol):
    """Type of a Submodule's accountant callback"""
    def __call__(
            self,
            pot: 'AccountingPot',
            event: 'HistoryBaseEntry',
            other_events: Iterator['HistoryBaseEntry'],
    ) -> None:
        """
        Callback to be called by the accounting module.
        If the callback expects more than 1 events, it is supposed to iterate over the
        `other_events` iterator to get them.
        Note that events consumed by the callback from the iterator will not be re-processed later.
        """


class TxAccountingTreatment(Enum):
    SWAP = 0


class TxEventSettings(NamedTuple):
    """Settings for an event generated by a decoder"""
    taxable: bool
    count_entire_amount_spend: bool
    count_cost_basis_pnl: bool
    method: Literal['acquisition', 'spend']
    accounting_treatment: Optional[TxAccountingTreatment] = None
    accountant_cb: Optional[AccountantCallback] = None
