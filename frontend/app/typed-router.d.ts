/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/404': RouteRecordInfo<'/404', '/404', Record<never, never>, Record<never, never>>,
    'accounts': RouteRecordInfo<'accounts', '/accounts', Record<never, never>, Record<never, never>>,
    'accounts-bitcoin': RouteRecordInfo<'accounts-bitcoin', '/accounts/bitcoin', Record<never, never>, Record<never, never>>,
    'accounts-evm': RouteRecordInfo<'accounts-evm', '/accounts/evm/:tab?', { tab?: ParamValueZeroOrOne<true> }, { tab?: ParamValueZeroOrOne<false> }>,
    'accounts-solana': RouteRecordInfo<'accounts-solana', '/accounts/solana', Record<never, never>, Record<never, never>>,
    'accounts-substrate': RouteRecordInfo<'accounts-substrate', '/accounts/substrate', Record<never, never>, Record<never, never>>,
    '/address-book-manager/': RouteRecordInfo<'/address-book-manager/', '/address-book-manager', Record<never, never>, Record<never, never>>,
    '/airdrops/': RouteRecordInfo<'/airdrops/', '/airdrops', Record<never, never>, Record<never, never>>,
    '/api-keys/': RouteRecordInfo<'/api-keys/', '/api-keys', Record<never, never>, Record<never, never>>,
    '/api-keys/exchanges/': RouteRecordInfo<'/api-keys/exchanges/', '/api-keys/exchanges', Record<never, never>, Record<never, never>>,
    '/api-keys/external/': RouteRecordInfo<'/api-keys/external/', '/api-keys/external', Record<never, never>, Record<never, never>>,
    '/api-keys/premium/': RouteRecordInfo<'/api-keys/premium/', '/api-keys/premium', Record<never, never>, Record<never, never>>,
    '/asset-manager/': RouteRecordInfo<'/asset-manager/', '/asset-manager', Record<never, never>, Record<never, never>>,
    'asset-manager-custom': RouteRecordInfo<'asset-manager-custom', '/asset-manager/custom', Record<never, never>, Record<never, never>>,
    'asset-manager-managed': RouteRecordInfo<'asset-manager-managed', '/asset-manager/managed', Record<never, never>, Record<never, never>>,
    'asset-manager-more': RouteRecordInfo<'asset-manager-more', '/asset-manager/more', Record<never, never>, Record<never, never>, 'asset-manager-cex-mapping' | 'asset-manager-counterparty-mapping' | 'asset-manager-missing-mappings' | 'asset-manager-newly-detected' | 'asset-manager-solana-token-migration'>,
    'asset-manager-cex-mapping': RouteRecordInfo<'asset-manager-cex-mapping', '/asset-manager/more/cex-mapping', Record<never, never>, Record<never, never>>,
    'asset-manager-counterparty-mapping': RouteRecordInfo<'asset-manager-counterparty-mapping', '/asset-manager/more/counterparty-mapping', Record<never, never>, Record<never, never>>,
    'asset-manager-missing-mappings': RouteRecordInfo<'asset-manager-missing-mappings', '/asset-manager/more/missing-mappings', Record<never, never>, Record<never, never>>,
    'asset-manager-newly-detected': RouteRecordInfo<'asset-manager-newly-detected', '/asset-manager/more/newly-detected', Record<never, never>, Record<never, never>>,
    'asset-manager-solana-token-migration': RouteRecordInfo<'asset-manager-solana-token-migration', '/asset-manager/more/solana-token-migration', Record<never, never>, Record<never, never>>,
    '/assets/[identifier]': RouteRecordInfo<'/assets/[identifier]', '/assets/:identifier', { identifier: ParamValue<true> }, { identifier: ParamValue<false> }>,
    'balances': RouteRecordInfo<'balances', '/balances', Record<never, never>, Record<never, never>>,
    'balances-blockchain': RouteRecordInfo<'balances-blockchain', '/balances/blockchain', Record<never, never>, Record<never, never>>,
    'balances-exchange': RouteRecordInfo<'balances-exchange', '/balances/exchange/:exchange?', { exchange?: ParamValueZeroOrOne<true> }, { exchange?: ParamValueZeroOrOne<false> }>,
    'balances-manual': RouteRecordInfo<'balances-manual', '/balances/manual/:tab?', { tab?: ParamValueZeroOrOne<true> }, { tab?: ParamValueZeroOrOne<false> }>,
    'balances-non-fungible': RouteRecordInfo<'balances-non-fungible', '/balances/non-fungible', Record<never, never>, Record<never, never>>,
    '/calendar/': RouteRecordInfo<'/calendar/', '/calendar', Record<never, never>, Record<never, never>>,
    'dashboard': RouteRecordInfo<'dashboard', '/dashboard', Record<never, never>, Record<never, never>>,
    'history-events': RouteRecordInfo<'history-events', '/history', Record<never, never>, Record<never, never>>,
    'import': RouteRecordInfo<'import', '/import', Record<never, never>, Record<never, never>>,
    '/locations/[identifier]': RouteRecordInfo<'/locations/[identifier]', '/locations/:identifier', { identifier: ParamValue<true> }, { identifier: ParamValue<false> }>,
    'nfts': RouteRecordInfo<'nfts', '/nfts', Record<never, never>, Record<never, never>>,
    '/onchain/': RouteRecordInfo<'/onchain/', '/onchain', Record<never, never>, Record<never, never>>,
    '/onchain/send/': RouteRecordInfo<'/onchain/send/', '/onchain/send', Record<never, never>, Record<never, never>>,
    'playground': RouteRecordInfo<'playground', '/playground', Record<never, never>, Record<never, never>>,
    'price-manager': RouteRecordInfo<'price-manager', '/price-manager', Record<never, never>, Record<never, never>>,
    'price-manager-historic': RouteRecordInfo<'price-manager-historic', '/price-manager/historic', Record<never, never>, Record<never, never>>,
    'price-manager-current': RouteRecordInfo<'price-manager-current', '/price-manager/latest', Record<never, never>, Record<never, never>>,
    '/reports/': RouteRecordInfo<'/reports/', '/reports', Record<never, never>, Record<never, never>>,
    '/reports/[id]': RouteRecordInfo<'/reports/[id]', '/reports/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/reports/wrapper': RouteRecordInfo<'/reports/wrapper', '/reports/wrapper', Record<never, never>, Record<never, never>>,
    '/settings': RouteRecordInfo<'/settings', '/settings', Record<never, never>, Record<never, never>, '/settings/account/' | '/settings/accounting/' | '/settings/database/' | '/settings/general/' | '/settings/interface/' | '/settings/modules/' | '/settings/oracle/' | '/settings/rpc/'>,
    '/settings/account/': RouteRecordInfo<'/settings/account/', '/settings/account', Record<never, never>, Record<never, never>>,
    '/settings/accounting/': RouteRecordInfo<'/settings/accounting/', '/settings/accounting', Record<never, never>, Record<never, never>>,
    '/settings/database/': RouteRecordInfo<'/settings/database/', '/settings/database', Record<never, never>, Record<never, never>>,
    '/settings/general/': RouteRecordInfo<'/settings/general/', '/settings/general', Record<never, never>, Record<never, never>>,
    '/settings/interface/': RouteRecordInfo<'/settings/interface/', '/settings/interface', Record<never, never>, Record<never, never>>,
    '/settings/modules/': RouteRecordInfo<'/settings/modules/', '/settings/modules', Record<never, never>, Record<never, never>>,
    '/settings/oracle/': RouteRecordInfo<'/settings/oracle/', '/settings/oracle', Record<never, never>, Record<never, never>>,
    '/settings/rpc/': RouteRecordInfo<'/settings/rpc/', '/settings/rpc', Record<never, never>, Record<never, never>>,
    '/staking/[[location]]': RouteRecordInfo<'/staking/[[location]]', '/staking/:location?', { location?: ParamValueZeroOrOne<true> }, { location?: ParamValueZeroOrOne<false> }>,
    '/statistics/': RouteRecordInfo<'/statistics/', '/statistics', Record<never, never>, Record<never, never>>,
    'statistics-graphs': RouteRecordInfo<'statistics-graphs', '/statistics/graphs', Record<never, never>, Record<never, never>>,
    'statistics-history-events': RouteRecordInfo<'statistics-history-events', '/statistics/history-events', Record<never, never>, Record<never, never>>,
    'tag_manager': RouteRecordInfo<'tag_manager', '/tag-manager', Record<never, never>, Record<never, never>>,
    '/user/': RouteRecordInfo<'/user/', '/user', Record<never, never>, Record<never, never>>,
    '/user/create/': RouteRecordInfo<'/user/create/', '/user/create', Record<never, never>, Record<never, never>>,
    '/user/login/': RouteRecordInfo<'/user/login/', '/user/login', Record<never, never>, Record<never, never>>,
    '/wallet-bridge/': RouteRecordInfo<'/wallet-bridge/', '/wallet-bridge', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/404.vue': {
      routes: '/404'
      views: never
    }
    'src/pages/accounts/index.vue': {
      routes: 'accounts'
      views: never
    }
    'src/pages/accounts/bitcoin/index.vue': {
      routes: 'accounts-bitcoin'
      views: never
    }
    'src/pages/accounts/evm/[[tab]].vue': {
      routes: 'accounts-evm'
      views: never
    }
    'src/pages/accounts/solana/index.vue': {
      routes: 'accounts-solana'
      views: never
    }
    'src/pages/accounts/substrate/index.vue': {
      routes: 'accounts-substrate'
      views: never
    }
    'src/pages/address-book-manager/index.vue': {
      routes: '/address-book-manager/'
      views: never
    }
    'src/pages/airdrops/index.vue': {
      routes: '/airdrops/'
      views: never
    }
    'src/pages/api-keys/index.vue': {
      routes: '/api-keys/'
      views: never
    }
    'src/pages/api-keys/exchanges/index.vue': {
      routes: '/api-keys/exchanges/'
      views: never
    }
    'src/pages/api-keys/external/index.vue': {
      routes: '/api-keys/external/'
      views: never
    }
    'src/pages/api-keys/premium/index.vue': {
      routes: '/api-keys/premium/'
      views: never
    }
    'src/pages/asset-manager/index.vue': {
      routes: '/asset-manager/'
      views: never
    }
    'src/pages/asset-manager/custom/index.vue': {
      routes: 'asset-manager-custom'
      views: never
    }
    'src/pages/asset-manager/managed/index.vue': {
      routes: 'asset-manager-managed'
      views: never
    }
    'src/pages/asset-manager/more.vue': {
      routes: 'asset-manager-more' | 'asset-manager-cex-mapping' | 'asset-manager-counterparty-mapping' | 'asset-manager-solana-token-migration' | 'asset-manager-newly-detected' | 'asset-manager-missing-mappings' | '/asset-manager/more/cex-mapping' | '/asset-manager/more/counterparty-mapping' | '/asset-manager/more/missing-mappings' | '/asset-manager/more/newly-detected' | '/asset-manager/more/solana-token-migration'
      views: 'default'
    }
    'src/pages/asset-manager/more/cex-mapping/index.vue': {
      routes: 'asset-manager-cex-mapping'
      views: never
    }
    'src/pages/asset-manager/more/counterparty-mapping/index.vue': {
      routes: 'asset-manager-counterparty-mapping'
      views: never
    }
    'src/pages/asset-manager/more/missing-mappings/index.vue': {
      routes: 'asset-manager-missing-mappings'
      views: never
    }
    'src/pages/asset-manager/more/newly-detected/index.vue': {
      routes: 'asset-manager-newly-detected'
      views: never
    }
    'src/pages/asset-manager/more/solana-token-migration/index.vue': {
      routes: 'asset-manager-solana-token-migration'
      views: never
    }
    'src/pages/assets/[identifier].vue': {
      routes: '/assets/[identifier]'
      views: never
    }
    'src/pages/balances/index.vue': {
      routes: 'balances'
      views: never
    }
    'src/pages/balances/blockchain/index.vue': {
      routes: 'balances-blockchain'
      views: never
    }
    'src/pages/balances/exchange/[[exchange]].vue': {
      routes: 'balances-exchange'
      views: never
    }
    'src/pages/balances/manual/[[tab]].vue': {
      routes: 'balances-manual'
      views: never
    }
    'src/pages/balances/non-fungible/index.vue': {
      routes: 'balances-non-fungible'
      views: never
    }
    'src/pages/calendar/index.vue': {
      routes: '/calendar/'
      views: never
    }
    'src/pages/dashboard/index.vue': {
      routes: 'dashboard'
      views: never
    }
    'src/pages/history/index.vue': {
      routes: 'history-events'
      views: never
    }
    'src/pages/import/index.vue': {
      routes: 'import'
      views: never
    }
    'src/pages/locations/[identifier].vue': {
      routes: '/locations/[identifier]'
      views: never
    }
    'src/pages/nfts/index.vue': {
      routes: 'nfts'
      views: never
    }
    'src/pages/onchain/index.vue': {
      routes: '/onchain/'
      views: never
    }
    'src/pages/onchain/send/index.vue': {
      routes: '/onchain/send/'
      views: never
    }
    'src/pages/playground/index.vue': {
      routes: 'playground'
      views: never
    }
    'src/pages/price-manager/index.vue': {
      routes: 'price-manager'
      views: never
    }
    'src/pages/price-manager/historic/index.vue': {
      routes: 'price-manager-historic'
      views: never
    }
    'src/pages/price-manager/latest/index.vue': {
      routes: 'price-manager-current'
      views: never
    }
    'src/pages/reports/index.vue': {
      routes: '/reports/'
      views: never
    }
    'src/pages/reports/[id].vue': {
      routes: '/reports/[id]'
      views: never
    }
    'src/pages/reports/wrapper.vue': {
      routes: '/reports/wrapper'
      views: never
    }
    'src/pages/settings.vue': {
      routes: '/settings' | '/settings/accounting/' | '/settings/account/' | '/settings/database/' | '/settings/general/' | '/settings/modules/' | '/settings/interface/' | '/settings/oracle/' | '/settings/rpc/' | '/settings/account' | '/settings/accounting' | '/settings/database' | '/settings/general' | '/settings/interface' | '/settings/modules' | '/settings/oracle' | '/settings/rpc'
      views: 'default'
    }
    'src/pages/settings/account/index.vue': {
      routes: '/settings/account/'
      views: never
    }
    'src/pages/settings/accounting/index.vue': {
      routes: '/settings/accounting/'
      views: never
    }
    'src/pages/settings/database/index.vue': {
      routes: '/settings/database/'
      views: never
    }
    'src/pages/settings/general/index.vue': {
      routes: '/settings/general/'
      views: never
    }
    'src/pages/settings/interface/index.vue': {
      routes: '/settings/interface/'
      views: never
    }
    'src/pages/settings/modules/index.vue': {
      routes: '/settings/modules/'
      views: never
    }
    'src/pages/settings/oracle/index.vue': {
      routes: '/settings/oracle/'
      views: never
    }
    'src/pages/settings/rpc/index.vue': {
      routes: '/settings/rpc/'
      views: never
    }
    'src/pages/staking/[[location]].vue': {
      routes: '/staking/[[location]]'
      views: never
    }
    'src/pages/statistics/index.vue': {
      routes: '/statistics/'
      views: never
    }
    'src/pages/statistics/graphs/index.vue': {
      routes: 'statistics-graphs'
      views: never
    }
    'src/pages/statistics/history-events/index.vue': {
      routes: 'statistics-history-events'
      views: never
    }
    'src/pages/tag-manager/index.vue': {
      routes: 'tag_manager'
      views: never
    }
    'src/pages/user/index.vue': {
      routes: '/user/'
      views: never
    }
    'src/pages/user/create/index.vue': {
      routes: '/user/create/'
      views: never
    }
    'src/pages/user/login/index.vue': {
      routes: '/user/login/'
      views: never
    }
    'src/pages/wallet-bridge/index.vue': {
      routes: '/wallet-bridge/'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
